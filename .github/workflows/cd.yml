on:
  push:
    tags:
      - 'v*'

name: Create Release

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

  build:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          os_name: linux
        - os: macos-latest
          os_name: macos

    steps:
      - name: Check out
        uses: actions/checkout@v2

      - name: Cache ~/.stack folder
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: stack-global-${{ matrix.os_name }}-${{hashFiles('**.yaml')}}
          restore-keys: |
            stack-global-${{ matrix.os_name }}

      - name: Cache ~/.local/bin folder
        uses: actions/cache@v2
        with:
          path: ~/.local/bin
          key: stack-local-bin-${{ matrix.os_name }}-${{hashFiles('**.yaml')}}
          restore-keys: |
            stack-local-bin-${{ matrix.os_name }}

      - name: Cache .stack-work folder
        uses: actions/cache@v2
        with:
          path: .stack-work
          key: stack-work-${{ matrix.os_name }}-${{hashFiles('**.yaml')}}
          restore-keys: |
            stack-work-${{ matrix.os_name }}

      - uses: haskell/actions/setup@v1
        with:
          ghc-version: '8.10.3' # Exact version of ghc to use
          enable-stack: true
          stack-version: 'latest'

      - name: Build project
        run: |
          if [[ "$OSTYPE" == "linux-gnu"* ]]; then \
              echo $OSTYPE \
              mv package-static.yaml package.yaml \
              sudo apt-get -y update && sudo apt-get install \
                libtinfo5 \
                libtinfo-dev \
                libncurses-dev
          fi
          stack install --test
          mv ~/.local/bin/thock .

      - name: Reduce size of executable
        if: matrix.os_name == 'linux'
        uses: svenstaro/upx-action@v2
        with:
          file: thock
          args: "-9"

      - name: Compress executable
        run: tar czf thock.tar.gz thock

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: thock.tar.gz
          asset_name: thock-${{ matrix.os_name }}.tar.gz
          asset_content_type: application/gzip
